# Build stage
FROM node:lts-alpine AS builder
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY prisma ./prisma/

# Install ALL dependencies (including dev) for build
RUN npm ci

# Generate Prisma client
RUN npx prisma generate

# Copy source code
COPY . .

# Set build-time arguments (dummy values just to make the build work)
ARG NEXT_PUBLIC_URL=http://localhost:3000
ARG DATABASE_URL=postgresql://user:pass@localhost:5432/db
ARG AUTH_SECRET=dummy_secret_for_build_only
ARG ENCRYPTION_KEY=dummy_key_for_build_only

# Convert to ENV for build process
ENV NEXT_PUBLIC_URL=$NEXT_PUBLIC_URL
ENV DATABASE_URL=$DATABASE_URL
ENV AUTH_SECRET=$AUTH_SECRET
ENV ENCRYPTION_KEY=$ENCRYPTION_KEY

# Build application
RUN npm run build

# Production stage
FROM node:lts-alpine AS production
LABEL authors="OpenHealth"

# Install system dependencies
RUN apk add --no-cache graphicsmagick curl && \
    adduser --disabled-password ohuser

WORKDIR /app

# Copy package files and install production dependencies only
COPY package*.json ./
COPY prisma ./prisma/
RUN npm ci --only=production && \
    npm install prisma @prisma/client && \
    npx prisma generate

# Copy the standalone build output
# The standalone folder contains everything needed including server.js at the root
COPY --from=builder --chown=ohuser:ohuser /app/.next/standalone ./
# Copy static files that aren't included in standalone by default
COPY --from=builder --chown=ohuser:ohuser /app/.next/static ./.next/static
COPY --from=builder --chown=ohuser:ohuser /app/public ./public
# Copy translation messages
COPY --from=builder --chown=ohuser:ohuser /app/messages ./messages

# Create uploads directory
RUN mkdir -p public/uploads && chown -R ohuser:ohuser public/uploads

USER ohuser
EXPOSE 3000

# Start the application
# Push schema to database (creates tables) then start the server
CMD ["sh", "-c", "npx prisma db push --accept-data-loss && node server.js"]